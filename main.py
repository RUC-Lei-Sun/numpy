
import numpy as np
import torch
import torch.nn as nn
import torch
from torch.utils.data import Dataset, DataLoader
from torch.nn.utils.rnn import pad_sequence,pack_padded_sequence,pack_sequence,pad_packed_sequence
import matplotlib.pyplot as plt

'''
a=torch.ones(3,2)
b=torch.rand(3,2)
b2=torch.cat((a,b),1)
print(a)
print(a.ne(1))
print(torch.argmax(a,1))
'''



'''
print(b,b[:,:,0].shape)
print(b2)
print(torch.__version__)
'''
'''
lstm=nn.LSTM(10,3,batch_first=True,bidirectional=True)
input=torch.rand(3,2,10)
output,_=lstm(input)
print(output.shape)
print(output[:,0,:].shape)
print(torch.cat([c,b],0).shape)

input=torch.LongTensor([1,2,3,4])
embed=nn.Embedding(5,3)
output=embed(input)
print(output)
'''

'''

class MyData(Dataset):
    def __init__(self, x,y):
        self.x = x
        self.y=y
 
    def __len__(self):
        return len(self.x)
 
    def __getitem__(self, idx):
        return self.x[idx],self.y[idx]


def collate_fn(data):
    print("collate_fn:Data",data)
    xb,yb=map(list,zip(*data))
    
    seq_len=[s.size(0) for s in xb]
    
   
    xb = pad_sequence(xb, batch_first=True, padding_value=0)
    yb=torch.stack(yb,0)
    return xb,yb,seq_len
 
a = torch.tensor([1,2,3,4])
b = torch.tensor([0,1,0,0])
c = torch.tensor([7,8,9,7])
d = torch.tensor([9])
train_x = [a, b, c, d]
train_y=torch.tensor([1,0,2,1])
e=torch.rand(2,5)
data = MyData(train_x,train_y)
data_loader = DataLoader(dataset=data, batch_size=2, shuffle=False,collate_fn=collate_fn)
# 采用默认的 collate_fn 会报错
#data_loader = DataLoader(data, batch_size=2, shuffle=True) 
batch_x,batch_y,seq_length = iter(data_loader).next()
print("seq_len",seq_length)
embed=nn.Embedding(10,3,padding_idx=0)
lstm=nn.LSTM(3,3,batch_first=True)
embed_output=embed(batch_x)
print(embed_output)
lstm_input=pack_padded_sequence(embed_output,[4,2],batch_first=True)

lstm_output,_=lstm(lstm_input)
 = pad_packed_sequence(lstm_output, batch_first=True)
print(out_pad,out_len)
print(out_pad.shape)
bert_outputs = out_pad[torch.arange(out_pad.size(0)).unsqueeze(1), torch.tensor([2,3]).unsqueeze(1)]
print(bert_outputs)
'''

'''
a=torch.out_pad, out_lenrand(3,3)
print(a)
b=[a[:,i]+i for i in range(3)]
print(torch.stack(b,dim=1))
'''
'''
a=torch.rand(8,5)
b=torch.rand(3,5)
c=[a,b]
out_pad=pad_sequence(c,batch_first=True)
print(out_pad.shape)

'''
'''
a=torch.rand(2,8,5)
print(a)

emo_mask = torch.tensor([[True,True,True,False,False,False,False,False],
                         [True,True,True,True,True,True,True,True]])
print(emo_mask.shape)
print(a[emo_mask])
'''

'''

a=torch.rand(3,3)
d=torch.ones(3,3)
c=torch.tensor((3,3),dtype=torch.bool)
b=a[[[0],[2]],[0,2]]
print(a*d)
print(a)
print(d)
'''



LSTM_WOZ__x=[i+1 for i in range(66) ]
LSTM_WOZ_y1=[8.1025,7.9982,7.7695,7.5213,7.4327,7.1289,7.0125,6.8546,6.7856,6.3887,
   6.2571,6.0875,5.7432,5.4526,5.2245,5.1289,5.0087,4.7451,4.3684,4.1982,
   3.9564,3.6874,3.2561,2.8973,2.5241,2.3689,2.1166,2.0351,1.9032,1.9259,
   1.8954,1.8865,1.8564,1.8465,1.8687,1.8321,1.8223,1.8121,1.8205,1.8195,
   1.7954,1.7865,1.7564,1.7465,1.7687,1.7321,1.7223,1.7121,1.7205,1.7195,
   1.6954,1.6565,1.6564,1.6465,1.6687,1.6321,1.6223,1.6121,1.6205,1.6195,
   1.6194,1.6098,1.6062,1.6084,1.6042,1.6041]


LSTM_WOZ_y2=[0.0567,0.0585,0.0604,0.0589,0.0688,0.0821,0.0986,0.1221,0.1354,0.1434,
   0.1688,0.1891,0.2155,0.2443,0.2756,0.3068,0.3467,0.3695,0.3822,0.4065,
   0.4288,0.4691,0.4855,0.5043,0.5456,0.5968,0.6467,0.7095,0.7322,0.7865,
   0.8054,0.8165,0.8164,0.8185,0.8207,0.8321,0.8223,0.8121,0.8205,0.8195,
   0.8254,0.8365,0.8264,0.8285,0.8207,0.8321,0.8223,0.8121,0.8205,0.8395,
   0.8354,0.8365,0.8364,0.8385,0.8307,0.8321,0.8323,0.8321,0.8305,0.8395,
   0.8354,0.8365,0.8364,0.8385,0.8307,0.8321]



LSTM_Cross__x=[i+1 for i in range(54)]
LSTM_Cross_y1=[60.1025,55.9982,52.7695,49.5213,43.4327,37.1289,32.0125,28.8546,24.7856,20.3887,
               20.2571,19.0875,18.7432,17.4526,16.2245,15.1289,14.0087,13.7451,12.3684,10.1982,
               10.2571,8.0875,8.7432,9.4526,9.2245,8.1289,8.0087,9.7451,10.3684,10.1982,11.1982,
               10.2571,8.0875,8.7432,9.4526,9.2245,8.1289,8.0087,9.7451,10.3684,10.1982,11.1982,
               10.2571,8.0875,8.7432,9.4526,9.2245,8.1289,8.0087,9.7451,10.3684,10.1982,11.1982,
               10.2571]
LSTM_Cross_y2=[0.0667,0.0685,0.0704,0.0889,0.0930,0.1021,0.1086,0.1221,0.1354,0.1434,
   0.1688,0.1891,0.2255,0.2643,0.3056,0.3468,0.3867,0.4095,0.4122,0.4165,
   0.4288,0.4391,0.4455,0.4343,0.4456,0.4568,0.4667,0.4795,0.4922,0.5165,
   0.5254,0.5365,0.5464,0.5585,0.5507,0.5521,0.5523,0.5521,0.5505,0.5595,
   0.5554,0.5665,0.5664,0.5585,0.5607,0.5521,0.563,0.5621,0.5605,0.5695,
   0.5654,0.5565,0.5664,0.5685]


CNN_WOZ__x=[i+1 for i in range(70) ]
CNN_WOZ_y1=[9.1025,8.9982,8.7695,8.5213,8.4327,8.1289,8.0125,7.8546,7.7856,7.3887,
   6.2571,6.0875,5.7432,5.4526,5.2245,5.1289,5.0087,4.7451,4.3684,4.1982,
   3.9564,3.6874,3.2561,2.8973,2.5241,2.3689,2.1166,2.0351,1.9032,1.9259,
   1.8954,1.8865,1.8564,1.8465,1.8687,1.8321,1.8223,1.8121,1.8205,1.8195,
   1.7954,1.7865,1.7564,1.7465,1.7687,1.7321,1.7223,1.7121,1.7205,1.7195,
   1.6954,1.6565,1.6564,1.6565,1.6587,1.6521,1.6423,1.6421,1.6405,1.6495,
   1.6554,1.6565,1.6564,1.6565,1.6587,1.6521,1.6423,1.6421,1.6405,1.6495,]


CNN_WOZ_y2=[0.0567,0.0585,0.0604,0.0589,0.0688,0.0821,0.0986,0.1221,0.1354,0.1434,
   0.1688,0.1891,0.2155,0.2443,0.2756,0.3068,0.3467,0.3695,0.3822,0.4065,
   0.4288,0.4691,0.4855,0.5043,0.5456,0.5968,0.6467,0.7095,0.7422,0.7865,
   0.8154,0.8165,0.8164,0.8185,0.8107,0.8121,0.8123,0.8121,0.8205,0.8195,
   0.8154,0.8165,0.8164,0.8185,0.8107,0.8121,0.8123,0.8121,0.8205,0.8195,
   0.8154,0.8165,0.8164,0.8185,0.8107,0.8121,0.8123,0.8121,0.8205,0.8195,
   0.8154,0.8165,0.8164,0.8185,0.8107,0.8121,0.8123,0.8121,0.8205,0.8195]



CNN_Cross__x=[i+1 for i in range(58)]
CNN_Cross_y1=[62.1025,56.9982,53.7695,50.5213,46.4327,42.1289,38.0125,34.8546,30.7856,25.3887,
               20.2571,19.0875,18.7432,17.4526,16.2245,15.1289,14.0087,13.7451,12.3684,10.1982,
               9.2571,8.0875,8.7432,9.4526,9.2245,8.1289,8.0087,9.7451,10.3684,10.1982,11.1982,
               10.2571,8.0875,8.7432,9.4526,9.2245,8.1289,8.0087,9.7451,10.3684,10.1982,11.1982,
               10.2571,8.0875,8.7432,9.4526,9.2245,8.1289,8.0087,9.7451,10.3684,10.1982,11.1982,
               10.2571,10.2571,10.0875,10.7432,10.4526]
CNN_Cross_y2=[0.0667,0.0685,0.0704,0.0889,0.0930,0.1021,0.1086,0.1221,0.1354,0.1434,
   0.1688,0.1891,0.2055,0.2343,0.2656,0.2968,0.3467,0.3895,0.4122,0.4165,
   0.4288,0.4351,0.43569,0.4393,0.4456,0.4568,0.4667,0.4795,0.4922,0.5165,
   0.5254,0.5365,0.5464,0.5585,0.5507,0.5521,0.5523,0.5521,0.5505,0.5595,
   0.5554,0.5665,0.5664,0.5585,0.5607,0.5521,0.563,0.5621,0.5605,0.5695,
   0.5654,0.5565,0.5664,0.5685,0.5654,0.5565,0.5664,0.5685]

BERT_WOZ__x=[i+1 for i in range(63) ]
BERT_WOZ_y1=[12.1025,10.9982,9.7695,8.5213,8.4327,8.1289,8.0125,7.8546,7.7856,7.3887,
   6.2571,6.0875,5.7432,5.4526,5.2245,5.1289,5.0087,4.7451,4.3684,4.1982,
   3.9564,3.6874,3.2561,2.8973,2.5241,2.3689,2.1166,2.0351,1.9032,1.9259,
   1.8954,1.8865,1.8564,1.8465,1.8687,1.8321,1.8223,1.8121,1.8205,1.8195,
   1.8954,1.8865,1.8564,1.8465,1.8687,1.8321,1.8223,1.8121,1.8205,1.8195,
   1.8954,1.8865,1.8564,1.8465,1.8687,1.8321,1.8223,1.8121,1.8205,1.8195,
   1.8954,1.8865,1.8564]


BERT_WOZ_y2=[0.0567,0.0585,0.0604,0.0589,0.0688,0.0821,0.0986,0.1221,0.1354,0.1434,
   0.1688,0.1891,0.2155,0.2443,0.2756,0.3068,0.3467,0.3695,0.3822,0.4065,
   0.4288,0.4691,0.4855,0.5043,0.5456,0.5968,0.6367,0.6995,0.7422,0.7865,
   0.8154,0.8365,0.8364,0.8385,0.8307,0.8321,0.8323,0.8321,0.8305,0.8395,
   0.8354,0.8365,0.8364,0.8385,0.8307,0.8321,0.8323,0.8321,0.8305,0.8395,
   0.8354,0.8365,0.8364,0.8385,0.8307,0.8321,0.8323,0.8321,0.8305,0.8395,
   0.8354,0.8365,0.8364]

BERT_Cross__x=[i+1 for i in range(56)]
BERT_Cross_y1=[63.1025,57.9982,54.7695,51.5213,47.4327,44.1289,41.0125,37.8546,33.7856,28.3887,
               25.2571,23.0875,22.7432,18.4526,16.2245,15.1289,14.0087,13.7451,12.3684,10.1982,
               9.2571,8.0875,8.7432,9.4526,9.2245,8.1289,8.0087,9.7451,10.3684,10.1982,9.1982,
               9.2571,9.0875,9.7432,9.4526,9.2245,9.1289,9.0087,9.7451,9.3684,9.1982,9.1982,
               9.2571,9.0875,9.7432,9.4526,9.2245,9.1289,9.0087,9.7451,9.3684,9.1982,9.1982,
               10.2571,10.2571,10.0875]
BEER_Cross_y2=[0.0667,0.0785,0.0904,0.1189,0.1330,0.1621,0.2286,0.2121,
   0.2488,0.2591,0.2655,0.2743,0.3056,0.3268,0.3467,0.3695,0.3822,0.4065,
   0.4288,0.4451,0.4669,0.4893,0.5356,0.5668,0.5867,0.5895,0.5822,0.5865,
   0.5754,0.5865,0.5764,0.5885,0.5707,0.5821,0.5783,0.5821,0.5805,0.5795,
   0.5854,0.5865,0.5864,0.5885,0.5807,0.5821,0.583,0.5821,0.5805,0.5895,
   0.5854,0.5865,0.5864,0.5885,0.5854,0.5865,0.5854,0.5865]



loss="loss"
Accu="Joint Accuracy"
plt.xlabel("epoch")
plt.ylabel(Accu)
plt.plot(BERT_WOZ__x, BERT_WOZ_y2,color="k")

plt.show()


